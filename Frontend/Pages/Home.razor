@page "/"
@attribute [Authorize]

@using System.Threading.Channels
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Shared.TelemetryServer


@inject NavigationManager NavigationManager
@inject ILogger<Home> Logger
@inject IToastService ToastService
@inject ApiService ApiService
@inject LiveTelemetryService LiveTelemetryService

<PageTitle>Realtime Apps | Flight Tracker</PageTitle>

<FlightMap MapMarkers="@mapMarkers" />

<FluentSpacer />

<FluentLayout Style="padding: 20px 20px 40px 20px;">
	<FluentGrid Justify="JustifyContent.FlexStart">
		@foreach (var airplane in Airplanes)
		{
            // Consider the airplane started if it is on the map and has a status other than "Arrived"
			var isStarted = mapMarkers.Any(m => m.Id == airplane.Id &&
				!string.IsNullOrEmpty(m.Status) &&
				!m.Status!.Equals("Arrived", StringComparison.OrdinalIgnoreCase));

			var marker = mapMarkers.FirstOrDefault(m => m.Id == airplane.Id);

			<AirplaneControlPanel IsStarted="@isStarted" Marker="@marker" Airplane="@airplane" 
			Start="async () => await StartAirplane(airplane.Id)" 
			Stop="async () => await StopAirplane(airplane.Id)" />
		}
	</FluentGrid>
</FluentLayout>

@code {
	private readonly IReadOnlyCollection<Airplane> Airplanes = Airplane.Airplanes;

	private HubConnection? hubConnection;
	private List<MapMarker> mapMarkers = [];

	protected override async Task OnInitializedAsync()
	{
		try
		{
            hubConnection = await LiveTelemetryService.InitalizeHubConnection();

			hubConnection!.Reconnected += OnReconnected!;
			hubConnection.Closed += OnClosedPermanently!;

			HandleStartResponse();
			HandleStopResponse();

			await ConnectToSignalRHub();

			await HandleStreamTelemetry();
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Cannot connect to SignalR hub.");

			ToastService.ShowError("Cannot connect to SignalR hub.");
		}
	}

	private async Task ConnectToSignalRHub()
	{
		await hubConnection!.StartAsync();
	}

	private async Task OnReconnected(string connectionId)
	{
		await HandleStreamTelemetry();
	}

	private async Task OnClosedPermanently(Exception error)
	{
		await Task.Delay(5000);
		await ConnectToSignalRHub();
		await HandleStreamTelemetry();
	}

	private void HandleStartResponse()
	{
		hubConnection!.On<GenericResponse>(Constants.CLIENT_NOTIFY_AIRPLANE_START_RESPONSE, (response) =>
		{
			if (response.Success)
			{
				ToastService.ShowSuccess($"Airplane #{response.AirplaneId} started.");
			}
			else
			{
				ToastService.ShowError($"Cannot start Airplane #{response.AirplaneId}.");
			}
		});
	}

	private void HandleStopResponse()
	{
		hubConnection!.On<GenericResponse>(Constants.CLIENT_NOTIFY_AIRPLANE_STOP_RESPONSE, (response) =>
		{
			if (response.Success)
			{
				ToastService.ShowSuccess($"Airplane #{response.AirplaneId} stopped.");
				RemoveMarkersFromMap(response.AirplaneId);
				InvokeAsync(StateHasChanged);
			}
			else
			{
				ToastService.ShowError($"Cannot stop Airplane #{response.AirplaneId}.");
			}
		});
	}

	private async Task HandleStreamTelemetry()
	{
		var stream = hubConnection!.StreamAsync<AirplaneTelemetry>(Constants.SERVER_STREAM_TELEMETRY);

		await foreach (var telemetry in stream)
		{
			RemoveMarkersFromMap(telemetry.AirplaneId);
			AddMarkersToMap(telemetry);
			await InvokeAsync(StateHasChanged);

			if (telemetry.Status == "Arrived")
			{
				ToastService.ShowSuccess($"Airplane #{telemetry.AirplaneId} has arrived.");
			}
		}
    }

	private async Task StartAirplane(int airplaneId)
	{
		try
		{
			if (hubConnection?.State != HubConnectionState.Connected)
			{
				ToastService.ShowError("Cannot connect to SignalR hub.");
				return;
			}

			await ApiService.StartAirplane(airplaneId);
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, $"Error starting Airplane #{airplaneId}");
			ToastService.ShowError($"Error starting Airplane #{airplaneId}");
		}
	}

	private async Task StopAirplane(int airplaneId)
	{
		try
		{
			if (hubConnection?.State != HubConnectionState.Connected)
			{
				ToastService.ShowError("Cannot connect to SignalR hub.");
				return;
			}

			await ApiService.StopAirplane(airplaneId);
			RemoveMarkersFromMap(airplaneId);
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, $"Error stopping Airplane #{airplaneId}");
			ToastService.ShowError($"Error stopping Airplane #{airplaneId}");
		}
	}

	private void AddMarkersToMap(AirplaneTelemetry telemetry)
	{
		mapMarkers.Add(new MapMarker()
		{
			Id = telemetry.AirplaneId,
            Source = telemetry.Source,
            Destination = telemetry.Destination,
            Current = new LatLngLiteral { Lat = telemetry.Current.Latitude, Lng = telemetry.Current.Longitude },
			Heading = telemetry.Heading,
			Altitude = telemetry.Altitude,
			Velocity = telemetry.Velocity,
			Eta = telemetry.Eta,
            Status = telemetry.Status,
			Active = true,
			Clickable = false,
			Draggable = false
		});
	}

    private void RemoveMarkersFromMap(int airplaneId)
    {
        mapMarkers.RemoveAll(m => m.Id == airplaneId);
    }
}
