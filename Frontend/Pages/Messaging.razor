@page "/messaging"
@using Shared.ChatServer.ApiDtos
@using Shared.ChatServer.HubEvents
@using System.Collections.Concurrent
@attribute [Authorize]
@implements IDisposable

<PageTitle>Realtime Apps | Messaging</PageTitle>

@inject ILogger<Messaging> Logger
@inject IToastService ToastService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject ChatServerService ChatServerService
@inject RoomService RoomService
@inject RoomManager RoomManager
@inject Services.MessageService MessageService

<div class="chat-app">
    <div class="chat-room-list">
        <FluentButton Appearance="Appearance.Accent"
                      BackgroundColor="#1A1F71"
                      Color="#FFFFFF"
                      Style="width: 100%; margin-bottom: 10px;"
                      OnClick="@OpenCreateNewChatDialog"
                      Disabled="@isLoading">
            <div style="display: flex; justify-content: center; align-items: center; grid-gap: 5px;">
                <FluentIcon Icon="@(Icons.Filled.Size16.Add)" Color="Color.Custom" CustomColor="#ffffff" />
                Create New Chat
            </div>
        </FluentButton>
        <div class="room-list">
            @if (rooms.Count > 0)
            {
                @foreach (var room in rooms)
                {
                    var roomItemClass = "room-item";

                    @if (selectedRoom != null && room.Id == selectedRoom.Id)
                    {
                        roomItemClass += " selected";
                    }

                    <div class="@roomItemClass" @onclick="@(async () => await SelectRoom(room))">
                        @if (room.HasUnreadMessages)
                        {
                            <FluentCounterBadge BackgroundColor="@Color.Error" Color="Color.Fill" Dot="true">
                                <FluentIcon Icon="@(Icons.Regular.Size16.ChatMultiple)" />
                            </FluentCounterBadge>
                        }
                        else
                        {
                            <FluentIcon Icon="@(Icons.Regular.Size16.ChatMultiple)" />
                        }
                        <span>@room.Name</span>
                    </div>
                }
            }
            else
            {
                <!-- Default view when no room is available -->
                <p>No chat rooms available.</p>
            }
        </div>
    </div>
    <div class="chat-message-list">
        <MessageList SelectedRoom="@selectedRoom" IsLoadingRoom="@isLoadingRoom" CurrentUser="@currentUserId" OnSendMessage="@HandleSendMessage" OnUserTyping="@HandleUserTyping" OtherMembersTypingIndicator="@OtherMembersTypingIndicator" />
    </div>
</div>

@code {
    private bool isLoading = false;
    private HubConnection? hubConnection;
    private ICollection<RoomModel> rooms = [];
    private RoomModel? selectedRoom;
    private bool isLoadingRoom = false;
    private string OtherMembersTypingIndicator = string.Empty;
    private ConcurrentDictionary<long, HashSet<string>> TypingUsers = new();
    private ConcurrentDictionary<long, CancellationTokenSource> TypingDelayTokens = new();
    private string currentUserId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var provider = (CustomAuthenticationStateProvider)AuthStateProvider;
        currentUserId = await provider.GetAuthenticatedUserName() ?? string.Empty;

        try
        {
            var rooms = await RoomService.GetRooms();

            RoomManager.AddRooms(rooms.Select(r => new RoomModel
            {
                Id = r.Id.GetValueOrDefault(),
                Name = r.Name!,
                Members = r.Members!
            }));

            UpdateRoomList();
            RoomManager.RoomsChanged += OnRoomsChanged;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error while getting rooms.");
            ToastService.ShowError("Error while getting rooms.");
        }

        try
        {
            hubConnection = await ChatServerService.InitalizeHubConnection();

            hubConnection!.Reconnecting += OnReconnecting!;
            hubConnection!.Reconnected += OnReconnected!;
            hubConnection.Closed += OnClosedPermanently!;

            await ConnectToSignalRHub();

            hubConnection.On<ChatRoomCreatedEvent>(Constants.CLIENT_CHAT_ROOM_CREATED, HandleChatRoomCreated);
            hubConnection.On<ChatRoomDeletedEvent>(Constants.CLIENT_CHAT_ROOM_DELETED, HandleChatRoomDeleted);
            hubConnection.On<ChatMessageSentEvent>(Constants.CLIENT_CHAT_MESSAGE_SENT, HandleMessageReceived);
            hubConnection.On<ChatMessageDeliveredEvent>(Constants.CLIENT_CHAT_MESSAGE_DELIVERED, HandleMessageDelivered);
            hubConnection.On<ChatMessageReadEvent>(Constants.CLIENT_CHAT_MESSAGE_READ, HandleMessageRead);
            hubConnection.On<long, string>(Constants.CLIENT_CHAT_MESSAGE_TYPING, HandleOtherMembersTyping);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Cannot connect to Chat hub.");

            ToastService.ShowError("Cannot connect to Chat hub.");
        }

        isLoading = false;
    }

    private void OnRoomsChanged()
    {
        UpdateRoomList();
    }

    private void UpdateRoomList()
    {
        rooms = RoomManager.GetRooms();
        StateHasChanged();
    }

    private async Task ConnectToSignalRHub()
    {
        await hubConnection!.StartAsync();
    }

    private Task OnReconnecting(Exception error)
    {
        ToastService.ShowError("Disconnected from Chat hub.");
        return Task.CompletedTask;
    }

    private Task OnReconnected(string connectionId)
    {
        ToastService.ShowInfo("Reconnected to Chat hub.");
        return Task.CompletedTask;
    }

    private async Task OnClosedPermanently(Exception error)
    {
        await Task.Delay(5000);
        await ConnectToSignalRHub();
    }

    private async Task OpenCreateNewChatDialog()
    {
        await DialogService.ShowDialogAsync<CreateNewChatDialog>(new DialogParameters
            {
                Width = "400px"
            });
    }

    private async Task HandleChatRoomCreated(ChatRoomCreatedEvent @event)
    {
        var roomAdded = RoomManager.AddOrUpdateRoom(new RoomModel
        {
            Id = @event.Id,
            Name = @event.Name,
            Members = @event.Members!
        });

        if (roomAdded)
        {
            await JSRuntime.InvokeVoidAsync("playAlertSound");
        }
    }

    private async Task HandleChatRoomDeleted(ChatRoomDeletedEvent @event)
    {
        RoomManager.RemoveRoom(@event.Id);
        await Task.CompletedTask;
    }

    private async Task SelectRoom(RoomModel room)
    {
        isLoadingRoom = true;

        selectedRoom = room;
        RoomManager.SelectRoom(room.Id);
        StateHasChanged();

        var messages = await MessageService.GetMessages(room.Id);

        if (messages is not null)
        {
            RoomManager.InitRoomMessages(room.Id, messages.Select(m => new MessageModel
            {
                Id = m.Id,
                Message = m.Message,
                CreatedAt = m.CreatedAt,
                SentAt = m.SentAt,
                Sender = m.Sender,
                DeliveryReceipts = m.DeliveryReceipts!.Select(dr => new MessageDeliveryReceiptModel
                {
                    MessageId = dr.MessageId,
                    DeliveredAt = dr.DeliveredAt,
                    Recipient = dr.Recipient
                }).ToList(),
                ReadReceipts = m.ReadReceipts!.Select(rr => new MessageReadReceiptModel
                {
                    MessageId = rr.MessageId,
                    ReadAt = rr.ReadAt,
                    Recipient = rr.Recipient
                }).ToList(),
            }));

            // Mark messages as delivered
            var undeliveredMessages = messages.Where(m =>
                m.DeliveryReceipts!.All(dr => dr.Recipient != currentUserId)).ToList();

            foreach (var message in undeliveredMessages)
            {
                await MessageService.MarkMessageAsDelivered(room.Id, message.Id);
            }

            // Mark messages as read
            var unreadMessages = messages.Where(m =>
                m.ReadReceipts!.All(rr => rr.Recipient != currentUserId)).ToList();

            if (unreadMessages.Count > 0)
            {
                await MessageService.MarkMessagesAsRead(room.Id);
            }

            isLoadingRoom = false;

            StateHasChanged();
        }

        RoomManager.SetRoomHasUnreadMessages(room.Id, false);
    }

    private void HandleOtherMembersTyping(long roomId, string userId)
    {
        if (userId == currentUserId)
        {
            return; // Ignore typing events from the current user
        }

        if (!TypingUsers.ContainsKey(roomId))
        {
            TypingUsers[roomId] = new HashSet<string>();
        }

        // Add the user to the typing list
        TypingUsers[roomId].Add(userId);

        // Cancel any existing delay for this room
        if (TypingDelayTokens.TryGetValue(roomId, out var existingTokenSource))
        {
            existingTokenSource.Cancel();
        }

        // Create a new delay token
        var tokenSource = new CancellationTokenSource();
        TypingDelayTokens[roomId] = tokenSource;

        // Remove the user after a delay if no new typing event occurs
        _ = Task.Delay(3000, tokenSource.Token).ContinueWith(task =>
        {
            if (!task.IsCanceled && TypingUsers.ContainsKey(roomId))
            {
                TypingUsers[roomId].Clear();
                UpdateTypingIndicator(roomId);
            }
        });

        UpdateTypingIndicator(roomId);
    }

    private void UpdateTypingIndicator(long roomId)
    {
        if (selectedRoom != null && selectedRoom.Id == roomId)
        {
            var typingUsers = string.Join(", ", TypingUsers[roomId]);
            if (TypingUsers[roomId].Count == 1)
            {
                OtherMembersTypingIndicator = $"{typingUsers} is typing...";
            }
            else if (TypingUsers[roomId].Count > 1)
            {
                OtherMembersTypingIndicator = $"{typingUsers} are typing...";
            }
            else
            {
                OtherMembersTypingIndicator = string.Empty;
            }
            StateHasChanged();
        }
    }

    private async Task HandleUserTyping(bool isUserTyping)
    {
        if (isUserTyping)
        {
            await hubConnection!.SendAsync(Constants.SERVER_IS_TYPING, selectedRoom!.Id);
        }
    }

    private async Task HandleSendMessage(string message)
    {
        if (selectedRoom != null && !string.IsNullOrWhiteSpace(message))
        {
            var response = await MessageService.SendMessage(selectedRoom.Id, new SendMessageRequest
            {
                CreatedAt = DateTime.UtcNow,
                Message = message.Trim(),
                MessageId = Guid.CreateVersion7(),
            });

            if (response!.Success)
            {
                var messageModel = new MessageModel
                {
                    Id = response.MessageId,
                    Message = message.Trim(),
                    CreatedAt = DateTime.UtcNow,
                    SentAt = DateTime.UtcNow,
                    Sender = currentUserId
                };

                RoomManager.AddOrUpdateRoomMessage(selectedRoom.Id, messageModel, isSent: true);
            }
            else
            {
                ToastService.ShowError("Failed to send message.");
            }
        }
    }

    private async Task HandleMessageReceived(ChatMessageSentEvent @event)
    {
        var newMessage = new MessageModel
        {
            Id = @event.MessageId,
            Message = @event.Message,
            CreatedAt = @event.CreatedAt,
            SentAt = @event.SentAt,
            Sender = @event.Sender
        };

        if (!newMessage.IsSelfMessage(currentUserId)
            && RoomManager.AddOrUpdateRoomMessage(@event.RoomId, newMessage))
        {
            await JSRuntime.InvokeVoidAsync("playAlertSound");

            await MessageService.MarkMessageAsDelivered(@event.RoomId, @event.MessageId);

            if (selectedRoom?.Id == @event.RoomId)
            {
                // Mark the message as read if the room is selected
                await MessageService.MarkMessagesAsRead(@event.RoomId);
            }

            if (selectedRoom?.Id != @event.RoomId)
            {
                RoomManager.SetRoomHasUnreadMessages(@event.RoomId, true);

                // Show a toast notification for the new message
                ToastService.ShowInfo($"New message from {newMessage.Sender}");
            }
        }
    }

    private void HandleMessageDelivered(ChatMessageDeliveredEvent @event)
    {
        RoomManager.AddDeliveryReceipt(@event.RoomId, new MessageDeliveryReceiptModel
        {
            MessageId = @event.MessageId,
            DeliveredAt = @event.DeliveredAt,
            Recipient = @event.Recipient
        });
    }

    private void HandleMessageRead(ChatMessageReadEvent @event)
    {
        RoomManager.AddReadReceipts(@event.RoomId, @event.MessageIds.Select(messageId => new MessageReadReceiptModel
        {
            MessageId = messageId,
            ReadAt = @event.ReadAt,
            Recipient = @event.Recipient
        }));
    }

    public void Dispose()
    {
        if (hubConnection != null)
        {
            hubConnection.Reconnecting -= OnReconnecting!;
            hubConnection.Reconnected -= OnReconnected!;
            hubConnection.Closed -= OnClosedPermanently!;
            _ = hubConnection.DisposeAsync();
        }

        RoomManager.RoomsChanged -= OnRoomsChanged;
        RoomManager.Dispose();
    }
}
